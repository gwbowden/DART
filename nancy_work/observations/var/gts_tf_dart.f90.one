module add_interface
Interface insert_gts_obs

SUBROUTINE insert_gts_obs_single(gtsobs, &
                          pressure_type, height_type, u_wind_type,v_wind_type, &
                          temperature_type, dew_point_type, rh_type, &
                          which_vert, num_obs, obs, seq)
use         types_mod, only : r8, missing_r8, missing_data, DEG2RAD, earth_radius
use     utilities_mod, only : open_file, close_file, initialize_utilities, &
                              register_module, logfileunit, E_MSG, timestamp, &
                              error_handler, find_namelist_in_file, check_namelist_read
use  obs_sequence_mod, only : obs_type, obs_sequence_type, init_obs_sequence, insert_obs_in_seq, &
                              set_copy_meta_data, set_qc_meta_data, write_obs_seq, assignment(=), &
                              init_obs, static_init_obs_sequence, set_obs_def, set_obs_values, set_qc
use       obs_def_mod, only : set_obs_def_location, set_obs_def_error_variance, &
                              set_obs_def_kind, set_obs_def_time, set_obs_def_key, &
                              obs_def_type
use      obs_kind_mod, only : SAT_U_WIND_COMPONENT, SAT_V_WIND_COMPONENT, &
                              RADIOSONDE_U_WIND_COMPONENT, RADIOSONDE_V_WIND_COMPONENT, &
                              RADIOSONDE_TEMPERATURE, RADIOSONDE_SPECIFIC_HUMIDITY, &
                              DEW_POINT_TEMPERATURE, &
                              METAR_U_10_METER_WIND, METAR_V_10_METER_WIND, METAR_TEMPERATURE_2_METER, &
                              METAR_SPECIFIC_HUMIDITY_2_METER, METAR_SURFACE_PRESSURE, METAR_POT_TEMP_2_METER
use      location_mod, only : location_type, set_location, VERTISSURFACE, VERTISPRESSURE, VERTISHEIGHT
use  time_manager_mod, only : time_type, set_date, set_calendar_type, GREGORIAN
use DA_Constants
use DA_Define_Structures
use module_obs
   type(single_level_type), intent(in)    :: gtsobs
   integer, optional, intent(in)          :: pressure_type, height_type, &
                                             u_wind_type, v_wind_type, &
                                             temperature_type, dew_point_type, &
                                             rh_type
   integer, intent(in)                    :: which_vert
   integer, intent(inout)                 :: num_obs
   type(obs_type), intent(inout)          :: obs
   type(obs_sequence_type), intent(inout) :: seq
END SUBROUTINE insert_gts_obs_single

SUBROUTINE insert_gts_obs_multi(gtsobs, &
                          pressure_type, height_type, u_wind_type,v_wind_type, &
                          temperature_type, dew_point_type, rh_type, &
                          which_vert, num_obs, obs, seq)
use         types_mod, only : r8, missing_r8, missing_data, DEG2RAD, earth_radius
use     utilities_mod, only : open_file, close_file, initialize_utilities, &
                              register_module, logfileunit, E_MSG, timestamp, &
                              error_handler, find_namelist_in_file, check_namelist_read
use  obs_sequence_mod, only : obs_type, obs_sequence_type, init_obs_sequence, insert_obs_in_seq, &
                              set_copy_meta_data, set_qc_meta_data, write_obs_seq, assignment(=), &
                              init_obs, static_init_obs_sequence, set_obs_def, set_obs_values, set_qc
use       obs_def_mod, only : set_obs_def_location, set_obs_def_error_variance, &
                              set_obs_def_kind, set_obs_def_time, set_obs_def_key, &
                              obs_def_type
use      obs_kind_mod, only : SAT_U_WIND_COMPONENT, SAT_V_WIND_COMPONENT, &
                              RADIOSONDE_U_WIND_COMPONENT, RADIOSONDE_V_WIND_COMPONENT, &
                              RADIOSONDE_TEMPERATURE, RADIOSONDE_SPECIFIC_HUMIDITY, &
                              DEW_POINT_TEMPERATURE, &
                              METAR_U_10_METER_WIND, METAR_V_10_METER_WIND, METAR_TEMPERATURE_2_METER, &
                              METAR_SPECIFIC_HUMIDITY_2_METER, METAR_SURFACE_PRESSURE, METAR_POT_TEMP_2_METER
use      location_mod, only : location_type, set_location, VERTISSURFACE, VERTISPRESSURE, VERTISHEIGHT
use  time_manager_mod, only : time_type, set_date, set_calendar_type, GREGORIAN
use DA_Constants
use DA_Define_Structures
use module_obs
   type(multi_level_type), intent(in)     :: gtsobs
   integer, optional, intent(in)          :: pressure_type, height_type, &
                                             u_wind_type, v_wind_type, &
                                             temperature_type, dew_point_type, &
                                             rh_type
   integer, intent(in)                    :: which_vert
   integer, intent(inout)                 :: num_obs
   type(obs_type), intent(inout)          :: obs
   type(obs_sequence_type), intent(inout) :: seq
END SUBROUTINE insert_gts_obs_multi
End Interface insert_gts_obs
contains

SUBROUTINE insert_gts_obs_single(gtsobs, &
                          pressure_type, height_type, u_wind_type,v_wind_type, &
                          temperature_type, dew_point_type, rh_type, &
                          which_vert, num_obs, obs, seq)
!-------------------------------------------------------------------------------

   implicit none

   type(single_level_type), intent(in)    :: gtsobs
   integer, optional, intent(in)          :: pressure_type, height_type, &
                                             u_wind_type, v_wind_type, &
                                             temperature_type, dew_point_type, &
                                             rh_type
   integer, intent(in)                    :: which_vert
   integer, intent(inout)                 :: num_obs
   type(obs_type), intent(inout)          :: obs
   type(obs_sequence_type), intent(inout) :: seq

   type(obs_def_type)      :: obs_def
   type(location_type)     :: location
   type(time_type)         :: time

   character(len=80)       :: dummy
   integer                 :: year, month, day, hours, minutes, seconds
   real(r8)                :: lat,lon,pressure, height

   integer                 :: i, levels
   real(r8)                :: windspd, winddir, uu, vv, tk, td, rh, qv
   real(r8)                :: obs_value(1), obs_err

   logical                 :: valid


   ! time info
   read(gtsobs%info%date_char, '(I4,5(A1,I2))')  &
        year, dummy, month, dummy, day, dummy, hours, dummy, minutes, dummy, seconds
   time = set_date(year, month, day, hours, minutes, seconds)
   call set_obs_def_time(obs_def, time)

   ! number of vertical levels
   levels = gtsobs%info%levels

   ! location info
   lat = gtsobs%info%lat
   lon = gtsobs%info%lon
   ! Dart longitude from 0 to 360
   if(lon < 0.0_r8) lon = lon + 360.0_r8
   height = gtsobs%info%elv
   pressure = gtsobs%each%pressure%data
   if (which_vert.eq.VERTISSURFACE .or. which_vert.eq.VERTISHEIGHT) then
      location = set_location(lon, lat, height, which_vert)
   else if (which_vert.eq.VERTISPRESSURE) then
      location = set_location(lon, lat, pressure, which_vert)
   end if
   call set_obs_def_location(obs_def, location)

   if (present(u_wind_type) .or. present(v_wind_type)) then
      !convert wind speed and direction to zonal and meridional components
      windspd = gtsobs%each%speed%data
      winddir = gtsobs%each%direction%data
      call spddir2uv(windspd,winddir,uu,vv,valid)
      if (valid) then
         ! Insert obs into DART obs sequence
         obs_value(1) = uu
         obs_err = ob%synop(i)%each%speed%error
         call set_obs_def_kind(obs_def, u_wind_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
         obs_value(1) = vv
         num_obs = num_obs + 1
         call set_obs_def_kind(obs_def, v_wind_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(temperature_type)) then
      !temperature in K
      tk = gtsobs%each%temperature%data
      if ( tk > 0.0_r8 .and. tk < 1.0e3_r8 ) then
         obs_value(1) = tk
         obs_err = gtsobs%each%temperature%error
         call set_obs_def_kind(obs_def, temperature_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(dew_point_type)) then
      !dew point in K
      td = gtsobs%each%dew_point%data
      if ( td > 0.0_r8 .and. td < 1.0e3_r8 ) then
         obs_value(1) = td
         obs_err = gtsobs%each%dew_point%error
         call set_obs_def_kind(obs_def, dew_point_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(rh_type)) then
      !relative humidity rh
      rh = gtsobs%each%rh%data
      if ( rh >= 0.0_r8 .and. rh <= 1.2e2_r8 ) then
         obs_value(1) = rh
         obs_err = gtsobs%each%rh%error
         call set_obs_def_kind(obs_def, rh_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(pressure_type)) then
      pressure = gtsobs%each%pressure%data
      if ( pressure >= -100.0e3_r8 .and. pressure < 100.0e3_r8 ) then
         obs_value(1) = pressure
         obs_err = gtsobs%each%pressure%error
         call set_obs_def_kind(obs_def, pressure_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(height_type)) then
      height = gtsobs%each%height%data
      if ( height >= -100.0e3_r8 .and. height < 100.0e3_r8 ) then
         obs_value(1) = height
         obs_err = gtsobs%each%height%error
         call set_obs_def_kind(obs_def, height_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

END subroutine insert_gts_obs_single

!-------------------------------------------------------------------------------
SUBROUTINE insert_gts_obs_multi(gtsobs, &
                          pressure_type, height_type, u_wind_type,v_wind_type, &
                          temperature_type, dew_point_type, rh_type, &
                          which_vert, num_obs, obs, seq)
!-------------------------------------------------------------------------------

   implicit none

   type(multi_level_type), intent(in)     :: gtsobs
   integer, optional, intent(in)          :: pressure_type, height_type, &
                                             u_wind_type, v_wind_type, &
                                             temperature_type, dew_point_type, &
                                             rh_type
   integer, intent(in)                    :: which_vert
   integer, intent(inout)                 :: num_obs
   type(obs_type), intent(inout)          :: obs
   type(obs_sequence_type), intent(inout) :: seq

   type(obs_def_type)      :: obs_def
   type(location_type)     :: location
   type(time_type)         :: time

   character(len=80)       :: dummy
   integer                 :: year, month, day, hours, minutes, seconds
   real(r8)                :: lat,lon,pressure, height

   integer                 :: i, levels
   real(r8)                :: windspd, winddir, uu, vv, tk, td, rh, qv
   real(r8)                :: obs_value(1), obs_err

   logical                 :: valid


   ! time info
   read(gtsobs%info%date_char, '(I4,5(A1,I2))')  &
        year, dummy, month, dummy, day, dummy, hours, dummy, minutes, dummy, seconds
   time = set_date(year, month, day, hours, minutes, seconds)
   call set_obs_def_time(obs_def, time)

   ! number of vertical levels
   levels = gtsobs%info%levels

!------------------
   do i = 1, levels
!------------------

   ! location info
   lat = gtsobs%info%lat
   lon = gtsobs%info%lon
   ! Dart longitude from 0 to 360
   if(lon < 0.0_r8) lon = lon + 360.0_r8
   height = gtsobs%info%elv
   pressure = gtsobs%each(i)%pressure%data
   if (which_vert.eq.VERTISSURFACE .or. which_vert.eq.VERTISHEIGHT) then
      location = set_location(lon, lat, height, which_vert)
   else if (which_vert.eq.VERTISPRESSURE) then
      location = set_location(lon, lat, pressure, which_vert)
   end if
   call set_obs_def_location(obs_def, location)

   if (present(u_wind_type) .or. present(v_wind_type)) then
      !convert wind speed and direction to zonal and meridional components
      windspd = gtsobs%each(i)%speed%data
      winddir = gtsobs%each(i)%direction%data
      call spddir2uv(windspd,winddir,uu,vv,valid)
      if (valid) then
         ! Insert obs into DART obs sequence
         obs_value(1) = uu
         obs_err = gtsobs%each(i)%speed%error
         call set_obs_def_kind(obs_def, u_wind_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
         obs_value(1) = vv
         num_obs = num_obs + 1
         call set_obs_def_kind(obs_def, v_wind_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(temperature_type)) then
      !temperature in K
      tk = gtsobs%each(i)%temperature%data
      if ( tk > 0.0_r8 .and. tk < 1.0e3_r8 ) then
         obs_value(1) = tk
         obs_err = gtsobs%each(i)%temperature%error
         call set_obs_def_kind(obs_def, temperature_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(dew_point_type)) then
      !dew point in K
      td = gtsobs%each(i)%dew_point%data
      if ( td > 0.0_r8 .and. td < 1.0e3_r8 ) then
         obs_value(1) = td
         obs_err = gtsobs%each(i)%dew_point%error
         call set_obs_def_kind(obs_def, dew_point_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(rh_type)) then
      !relative humidity rh
      rh = gtsobs%each(i)%rh%data
      if ( rh >= 0.0_r8 .and. rh <= 1.2e2_r8 ) then
         obs_value(1) = rh
         obs_err = gtsobs%each(i)%rh%error
         call set_obs_def_kind(obs_def, rh_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(pressure_type)) then
      pressure = gtsobs%each(i)%pressure%data
      if ( pressure >= -100.0e3_r8 .and. pressure < 100.0e3_r8 ) then
         obs_value(1) = pressure
         obs_err = gtsobs%each(i)%pressure%error
         call set_obs_def_kind(obs_def, pressure_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

   if (present(height_type)) then
      height = gtsobs%each(i)%height%data
      if ( height >= -100.0e3_r8 .and. height < 100.0e3_r8 ) then
         obs_value(1) = height
         obs_err = gtsobs%each(i)%height%error
         call set_obs_def_kind(obs_def, height_type)
         call set_obs_def_error_variance(obs_def, obs_err*obs_err)
         call set_obs_def(obs, obs_def)
         call set_obs_values(obs, obs_value)
         num_obs = num_obs + 1
         call insert_obs_in_seq(seq, obs)
      endif
   endif

!---------------
   end do 
!---------------

END subroutine insert_gts_obs_multi
end module add_interface

! Data Assimilation Research Testbed -- DART
! Copyright 2004, 2005, Data Assimilation Initiative, University Corporation for Atmospheric Research
! Licensed under the GPL -- www.gpl.org/licenses/gpl.html
 
PROGRAM gts_tf_dart

! <next five lines automatically updated by CVS, do not edit>
! $Source: /home/thoar/CVS.REPOS/DART/converters/gts_tf_dart.f90,v $
! $Revision: 1.0 $
! $Date: 2006/01/04 00:00:00 $
! $Author: thoar $
! $Name:  $

use         types_mod, only : r8, missing_r8, missing_data, DEG2RAD, earth_radius
use     utilities_mod, only : open_file, close_file, initialize_utilities, &
                              register_module, logfileunit, E_MSG, timestamp, &
                              error_handler, find_namelist_in_file, check_namelist_read
use  obs_sequence_mod, only : obs_type, obs_sequence_type, init_obs_sequence, insert_obs_in_seq, &
                              set_copy_meta_data, set_qc_meta_data, write_obs_seq, assignment(=), &
                              init_obs, static_init_obs_sequence, set_obs_def, set_obs_values, set_qc
use       obs_def_mod, only : set_obs_def_location, set_obs_def_error_variance, &
                              set_obs_def_kind, set_obs_def_time, set_obs_def_key, &
                              obs_def_type
use      obs_kind_mod, only : SAT_U_WIND_COMPONENT, SAT_V_WIND_COMPONENT, &
                              RADIOSONDE_U_WIND_COMPONENT, RADIOSONDE_V_WIND_COMPONENT, &
                              RADIOSONDE_TEMPERATURE, RADIOSONDE_SPECIFIC_HUMIDITY, &
                              DEW_POINT_TEMPERATURE, &
                              METAR_U_10_METER_WIND, METAR_V_10_METER_WIND, METAR_TEMPERATURE_2_METER, &
                              METAR_SPECIFIC_HUMIDITY_2_METER, METAR_SURFACE_PRESSURE, METAR_POT_TEMP_2_METER
use      location_mod, only : location_type, set_location, VERTISSURFACE, VERTISPRESSURE, VERTISHEIGHT
use  time_manager_mod, only : time_type, set_date, set_calendar_type, GREGORIAN

use DA_Constants
use DA_Define_Structures
use module_obs

implicit none

! CVS Generated file description for error handling, do not edit
character(len=128) :: &
source   = "$Source: /home/thoar/CVS.REPOS/DART/converters/wrf-3dvar_tf_dart.f90,v $", &
revision = "$Revision: 1.7 $", &
revdate  = "$Date: 2005/10/20 01:19:20 $"

type(obs_sequence_type) :: seq
type(obs_type)          :: obs
type(obs_def_type)      :: obs_def
type(location_type)     :: location
type(time_type)         :: time

INTEGER           :: iunit, iost, io

character(len = 129) :: copy_meta_data, qc_meta_data

character(len=80) :: dummy
integer           :: year, month, day, hours, minutes, seconds
real(r8)          :: lat,lon,pressure, height

integer           :: i, ii, rv_qc, rf_qc, key, it, which_vert
integer           :: num_obs, num_copies, num_qc, max_num_obs=800000

real(r8)          :: windspd, winddir, uu, vv, tk, td, rh, qv
real(r8)          :: obs_value(1), obs_err

logical           :: valid

!-----------------------------------------------------------------------------
! Namelist with default values
!
character(len = 129) :: gts_file        = 'gts_obsout.dat', &
                        obs_seq_out_file_name = 'obs_seq.out'
integer              :: calendar_type         = GREGORIAN

logical  ::  Use_SynopObs   = .TRUE., &
             Use_ShipsObs   = .TRUE., &
             Use_MetarObs   = .TRUE., &
             Use_BuoysObs   = .TRUE., &
             Use_PilotObs   = .TRUE., &
             Use_SoundObs   = .TRUE., &
             Use_SatemObs   = .TRUE., &
             Use_SatobObs   = .TRUE., &
             Use_AirepObs   = .TRUE., &
             Use_GpspwObs   = .TRUE., &
             Use_SsmiRetrievalObs = .TRUE., &
             Use_SsmiTbObs  = .TRUE., &
             Use_Ssmt1Obs   = .TRUE., &
             Use_Ssmt2Obs   = .TRUE., &
             Use_QscatObs   = .TRUE.
logical  ::  dropsonde_only  = .FALSE.

integer  ::  num_thin_satob = 50, num_thin_qscat = 100

namelist /gts_tf_dart_nml/ gts_file, obs_seq_out_file_name, &
                           Use_SynopObs, &
                           Use_ShipsObs, &
                           Use_MetarObs, &
                           Use_BuoysObs, &
                           Use_PilotObs, &
                           Use_SoundObs, &
                           Use_SatemObs, &
                           Use_SatobObs, &
                           Use_AirepObs, &
                           Use_GpspwObs, &
                           Use_SsmiRetrievalObs, &
                           Use_SsmiTbObs, &
                           Use_Ssmt1Obs, &
                           Use_Ssmt2Obs, &
                           Use_QscatObs, &
                           dropsonde_only, &
                           num_thin_satob, &
                           num_thin_qscat 

!------------------------------------------------------------------------------
!------------------------------------------------------------------------------

!print*,'Input WRFVAR 2.1 GTS OBS filename: '
!read(*,'(a)') gts_file
!print*,'Output DART OBS Sequence filename: '
!read(*,'(a)') obs_seq_out_file_name

call initialize_utilities('gts_tf_dart')
call register_module(source, revision, revdate)

! Read the namelist entry
call find_namelist_in_file("input.nml", "gts_tf_dart_nml", iunit)
read(iunit, nml = gts_tf_dart_nml, iostat = io)
call check_namelist_read(iunit, io, "gts_tf_dart_nml")

! Record the namelist values used for the run ...
call error_handler(E_MSG,'gts_tf_dart','gts_tf_dart_nml values are',' ',' ',' ')
write(logfileunit, nml=gts_tf_dart_nml)
write(     *     , nml=gts_tf_dart_nml)

call set_calendar_type(calendar_type)

!-----------------------------------------------------------------------------!
! Read 3D-VAR GTS observation file
! at the end, 'ob' contains all observations
!-----------------------------------------------------------------------------!
!iunit = open_file(gts_file, action = 'read')
iunit = 99
open(iunit, file=gts_file)

max_sound_input = max_sound
max_synop_input = max_synop
max_satob_input = max_satob
max_airep_input = max_airep
max_satem_input = max_satem
max_pilot_input = max_pilot
max_amdar_input = max_amdar
max_metar_input = max_metar
max_gpspw_input = max_gpspw
max_ships_input = max_ships
max_ssmt1_input = max_ssmt1
max_ssmt2_input = max_ssmt2
max_ssmi_input  = max_ssmi
max_tovs_input  = max_tovs
max_qscat_input = max_qscat
max_profl_input = max_profl
max_buoys_input = max_buoys
max_bogus_input = max_bogus
max_gpsref_input = max_gpsref

CALL DA_Setup_Obs_Structures

!-----------------------------------------------------------------------------!
! Create DART obs sequence file
!-----------------------------------------------------------------------------!

! Initialize the counters:

num_obs = 0

call static_init_obs_sequence()

num_copies = 1
num_qc = 1

! Initialize an obs_sequence structure
call init_obs_sequence(seq, num_copies, num_qc, max_num_obs)

copy_meta_data = 'WRFVAR 2.1 GTS observations'
qc_meta_data = 'missing'
call set_copy_meta_data(seq, 1, copy_meta_data)
call set_qc_meta_data(seq, 1, qc_meta_data)

call init_obs(obs, num_copies, num_qc)

!  -----------------
!  LOOP OVER RECORDS
!  -----------------

!  -------------------
!  process synop begin
!  -------------------
if (Use_SynopObs == .TRUE.) then
   do i = 1, ob%num_synop
      call print_gts_obs_single(ob%synop(i))

      call insert_gts_obs_single(ob%synop(i), &
                          pressure_type    = METAR_SURFACE_PRESSURE, &
                          u_wind_type      = METAR_U_10_METER_WIND, &
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
endif
!  -----------------
!  process synop end
!  -----------------


call close_file(iunit)                                                        

!  PRINT OUT
!  =============
 
! Write out the sequence
call write_obs_seq(seq, obs_seq_out_file_name)

write(logfileunit,*)'FINISHED gts_tf_dart.'
write(logfileunit,*)

call timestamp(source,revision,revdate,'end') ! That closes the log file, too.
 
!END PROGRAM gts_tf_dart

contains

!--------------------------------------
subroutine spddir2uv(spd,dir,u,v,valid)
!--------------------------------------
   real(r8)  :: spd, dir, u, v, dir_rad
   logical   :: valid
   valid = .true.
   u = missing_r8
   v = missing_r8
   if ( spd /= 0.0_r8 .and. abs(dir) < 1.e5_r8 ) then
      dir_rad = dir*DEG2RAD
      u = -spd*sin(dir_rad)
      v = -spd*cos(dir_rad)
   else
      valid = .false.
   endif
   if ( abs(u) > 1.e3_r8 .or. abs(v) > 1.e3_r8 ) valid=.false.
   return
end subroutine spddir2uv

!--------------------------------------
SUBROUTINE print_gts_obs_single(gtsobs)
!--------------------------------------
   implicit none
   type(single_level_type), intent(in)    :: gtsobs
   print*, gtsobs%info%date_char
   print*, gtsobs%info%levels
end subroutine print_gts_obs_single

!-------------------------------------------------------------------------------

END PROGRAM gts_tf_dart
