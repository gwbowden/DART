! Data Assimilation Research Testbed -- DART
! Copyright 2004, 2005, Data Assimilation Initiative, University Corporation for Atmospheric Research
! Licensed under the GPL -- www.gpl.org/licenses/gpl.html
 
PROGRAM gts_tf_dart

! <next five lines automatically updated by CVS, do not edit>
! $Source: /home/thoar/CVS.REPOS/DART/converters/gts_tf_dart.f90,v $
! $Revision: 1.0 $
! $Date: 2006/01/04 00:00:00 $
! $Author: thoar $
! $Name:  $

use         types_mod, only : r8, missing_r8, missing_data, DEG2RAD, earth_radius
use     utilities_mod, only : open_file, close_file, initialize_utilities, &
                              register_module, logfileunit, E_MSG, timestamp, &
                              error_handler, find_namelist_in_file, check_namelist_read
use  obs_sequence_mod, only : obs_type, obs_sequence_type, init_obs_sequence, insert_obs_in_seq, &
                              set_copy_meta_data, set_qc_meta_data, write_obs_seq, assignment(=), &
                              init_obs, static_init_obs_sequence, set_obs_def, set_obs_values, set_qc
use       obs_def_mod, only : set_obs_def_location, set_obs_def_error_variance, &
                              set_obs_def_kind, set_obs_def_time, set_obs_def_key, &
                              obs_def_type
use      obs_kind_mod, only : SAT_U_WIND_COMPONENT, SAT_V_WIND_COMPONENT, &
                              QKSWND_U_WIND_COMPONENT, QKSWND_V_WIND_COMPONENT, &
                              RADIOSONDE_U_WIND_COMPONENT, RADIOSONDE_V_WIND_COMPONENT, &
                              RADIOSONDE_TEMPERATURE, RADIOSONDE_SPECIFIC_HUMIDITY, &
                              DEW_POINT_TEMPERATURE, &
                              METAR_U_10_METER_WIND, METAR_V_10_METER_WIND, METAR_TEMPERATURE_2_METER, &
                              METAR_SPECIFIC_HUMIDITY_2_METER, METAR_SURFACE_PRESSURE, &
                              BUOY_U_WIND_COMPONENT, BUOY_V_WIND_COMPONENT, BUOY_SURFACE_PRESSURE, &
                              BUOY_TEMPERATURE, BUOY_DEW_POINT_TEMPERATURE, &
                              SHIP_U_WIND_COMPONENT, SHIP_V_WIND_COMPONENT, SHIP_SURFACE_PRESSURE, &
                              SHIP_TEMPERATURE, SHIP_DEW_POINT_TEMPERATURE, &
                              SYNOP_U_WIND_COMPONENT, SYNOP_V_WIND_COMPONENT, SYNOP_SURFACE_PRESSURE, &
                              SYNOP_TEMPERATURE, SYNOP_DEW_POINT_TEMPERATURE, &
                              AIREP_U_WIND_COMPONENT, AIREP_V_WIND_COMPONENT, AIREP_PRESSURE, &
                              AIREP_TEMPERATURE, AIREP_DEW_POINT_TEMPERATUR
use      location_mod, only : location_type, set_location, VERTISSURFACE, VERTISPRESSURE, VERTISHEIGHT
use  time_manager_mod, only : time_type, set_date, set_calendar_type, GREGORIAN

use DA_Constants
use DA_Define_Structures
use module_obs

use gts_dart_mod

implicit none

! CVS Generated file description for error handling, do not edit
character(len=128) :: &
source   = "$Source: /home/thoar/CVS.REPOS/DART/converters/wrf-3dvar_tf_dart.f90,v $", &
revision = "$Revision: 1.7 $", &
revdate  = "$Date: 2005/10/20 01:19:20 $"

type(obs_sequence_type) :: seq
type(obs_type)          :: obs
type(obs_def_type)      :: obs_def
type(location_type)     :: location
type(time_type)         :: time

INTEGER           :: iunit, iost, io

character(len = 129) :: copy_meta_data, qc_meta_data

character(len=80) :: dummy
integer           :: year, month, day, hours, minutes, seconds
real(r8)          :: lat,lon,pressure, height

integer           :: i, ii, rv_qc, rf_qc, key, it, which_vert
integer           :: num_obs, num_copies, num_qc, max_num_obs=800000

real(r8)          :: windspd, winddir, uu, vv, tk, td, rh, qv
real(r8)          :: obs_value(1), obs_err

logical           :: valid

!-----------------------------------------------------------------------------
! Namelist with default values
!
character(len = 129) :: gts_file        = 'gts_obsout.dat', &
                        obs_seq_out_file_name = 'obs_seq.out'
integer              :: calendar_type         = GREGORIAN

logical  ::  Use_SynopObs   = .TRUE., &
             Use_ShipsObs   = .TRUE., &
             Use_MetarObs   = .TRUE., &
             Use_BuoysObs   = .TRUE., &
             Use_PilotObs   = .TRUE., &
             Use_SoundObs   = .TRUE., &
             Use_SatemObs   = .TRUE., &
             Use_SatobObs   = .TRUE., &
             Use_AirepObs   = .TRUE., &
             Use_AmdarObs   = .TRUE., &
             Use_GpspwObs   = .TRUE., &
             Use_SsmiRetrievalObs = .TRUE., &
             Use_SsmiTbObs  = .TRUE., &
             Use_Ssmt1Obs   = .TRUE., &
             Use_Ssmt2Obs   = .TRUE., &
             Use_QscatObs   = .TRUE.
logical  ::  dropsonde_only  = .FALSE.

integer  ::  num_thin_satob = 50, num_thin_qscat = 100

namelist /gts_tf_dart_nml/ gts_file, obs_seq_out_file_name, &
                           Use_SynopObs, &
                           Use_ShipsObs, &
                           Use_MetarObs, &
                           Use_BuoysObs, &
                           Use_PilotObs, &
                           Use_SoundObs, &
                           Use_SatemObs, &
                           Use_SatobObs, &
                           Use_AirepObs, &
                           Use_AmdarObs, &
                           Use_GpspwObs, &
                           Use_SsmiRetrievalObs, &
                           Use_SsmiTbObs, &
                           Use_Ssmt1Obs, &
                           Use_Ssmt2Obs, &
                           Use_QscatObs, &
                           dropsonde_only, &
                           num_thin_satob, &
                           num_thin_qscat 

!------------------------------------------------------------------------------

!print*,'Input WRFVAR 2.1 GTS OBS filename: '
!read(*,'(a)') gts_file
!print*,'Output DART OBS Sequence filename: '
!read(*,'(a)') obs_seq_out_file_name

call initialize_utilities('gts_tf_dart')
call register_module(source, revision, revdate)

! Read the namelist entry
call find_namelist_in_file("input.nml", "gts_tf_dart_nml", iunit)
read(iunit, nml = gts_tf_dart_nml, iostat = io)
call check_namelist_read(iunit, io, "gts_tf_dart_nml")

! Record the namelist values used for the run ...
call error_handler(E_MSG,'gts_tf_dart','gts_tf_dart_nml values are',' ',' ',' ')
write(logfileunit, nml=gts_tf_dart_nml)
write(     *     , nml=gts_tf_dart_nml)

call set_calendar_type(calendar_type)

!-----------------------------------------------------------------------------!
! Read 3D-VAR GTS observation file
! at the end, 'ob' contains all observations
!-----------------------------------------------------------------------------!
!iunit = open_file(gts_file, action = 'read')
iunit = 99
open(iunit, file=gts_file)

max_sound_input = max_sound
max_synop_input = max_synop
max_satob_input = max_satob
max_airep_input = max_airep
max_satem_input = max_satem
max_pilot_input = max_pilot
max_amdar_input = max_amdar
max_metar_input = max_metar
max_gpspw_input = max_gpspw
max_ships_input = max_ships
max_ssmt1_input = max_ssmt1
max_ssmt2_input = max_ssmt2
max_ssmi_input  = max_ssmi
max_tovs_input  = max_tovs
max_qscat_input = max_qscat
max_profl_input = max_profl
max_buoys_input = max_buoys
max_bogus_input = max_bogus
max_gpsref_input = max_gpsref

CALL DA_Setup_Obs_Structures

!-----------------------------------------------------------------------------!
! Create DART obs sequence file
!-----------------------------------------------------------------------------!

! Initialize the counters:

num_obs = 0

call static_init_obs_sequence()

num_copies = 1
num_qc = 1

! Initialize an obs_sequence structure
call init_obs_sequence(seq, num_copies, num_qc, max_num_obs)

copy_meta_data = 'WRFVAR 2.1 GTS observations'
qc_meta_data = 'missing'
call set_copy_meta_data(seq, 1, copy_meta_data)
call set_qc_meta_data(seq, 1, qc_meta_data)

call init_obs(obs, num_copies, num_qc)

!  -----------------
!  LOOP OVER RECORDS
!  -----------------

!--- process sound  ---
if (Use_SoundObs == .TRUE.) then
   do i = 1, ob%num_sound
      call insert_gts_obs(ob%sound(i), &
                          u_wind_type      = RADIOSONDE_U_WIND_COMPONENT, &
                          v_wind_type      = RADIOSONDE_V_WIND_COMPONENT, &
                          temperature_type = RADIOSONDE_TEMPERATURE, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISPRESSURE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_sound, '  TEMP,  total obs # ', num_obs
endif

!---  process satob  ---
if (Use_SatobObs == .TRUE.) then
   do i = 1, ob%num_satob, num_thin_satob      ! thinning: take one every num_thin_satob
      call insert_gts_obs(ob%satob(i), &
                          u_wind_type      = SAT_U_WIND_COMPONENT, &
                          v_wind_type      = SAT_V_WIND_COMPONENT, &
                          which_vert=VERTISPRESSURE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_satob, ' SATOB,  total obs # ', num_obs
endif

!--- process qscat ---
if (Use_QscatObs == .TRUE.) then
   do i = 1, ob%num_qscat, num_thin_qscat      ! thinning: take one every num_thin_qscat
!     call insert_gts_obs(ob%qscat(i), &
!                         u_wind_type      = METAR_U_10_METER_WIND, &
!                         v_wind_type      = METAR_V_10_METER_WIND, &
!                         which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
      call insert_gts_obs(ob%qscat(i), &
                          u_wind_type      = QKSWND_U_WIND_COMPONENT, &
                          v_wind_type      = QKSWND_V_WIND_COMPONENT, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_qscat, ' QSCAT,  total obs # ', num_obs
endif

!--- process synop ---
if (Use_SynopObs == .TRUE.) then
   do i = 1, ob%num_synop
      call insert_gts_obs(ob%synop(i), &
                          pressure_type    = METAR_SURFACE_PRESSURE, &
                          u_wind_type      = METAR_U_10_METER_WIND, &
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_synop, ' SYNOP,  total obs # ', num_obs
endif

!--- process metar ---
if (Use_MetarObs == .TRUE.) then
   do i = 1, ob%num_metar
      call insert_gts_obs(ob%metar(i), &
                          pressure_type    = METAR_SURFACE_PRESSURE, &
                          u_wind_type      = METAR_U_10_METER_WIND, &
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_metar, ' METAR,  total obs # ', num_obs
endif

!--- process buoys ---
if (Use_BuoysObs == .TRUE.) then
   do i = 1, ob%num_buoys
      call insert_gts_obs(ob%buoys(i), &
                          pressure_type    = METAR_SURFACE_PRESSURE, &
                          u_wind_type      = METAR_U_10_METER_WIND, &
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_buoys, '  BUOY,  total obs # ', num_obs
endif

!--- process airep ---
if (Use_AirepObs == .TRUE.) then
   do i = 1, ob%num_airep
      call insert_gts_obs(ob%airep(i), &
                          u_wind_type      = METAR_U_10_METER_WIND, & 
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_airep, ' AIREP,  total obs # ', num_obs
endif 

!--- process amdar ---
if (Use_AmdarObs == .TRUE.) then
   do i = 1, ob%num_amdar
      call insert_gts_obs(ob%amdar(i), &
                          u_wind_type      = METAR_U_10_METER_WIND, &
                          v_wind_type      = METAR_V_10_METER_WIND, &
                          temperature_type = METAR_TEMPERATURE_2_METER, &
                          dew_point_type   = DEW_POINT_TEMPERATURE, &
                          which_vert=VERTISSURFACE, num_obs=num_obs, obs=obs, seq=seq)
   enddo
   print*,'Processed ', ob%num_airep, ' AIREP,  total obs # ', num_obs
endif

call close_file(iunit)                                                        

!  PRINT OUT
!  =============
 
! Write out the sequence
call write_obs_seq(seq, obs_seq_out_file_name)

write(logfileunit,*)'FINISHED gts_tf_dart.'
write(logfileunit,*)

call timestamp(source,revision,revdate,'end') ! That closes the log file, too.
 
END PROGRAM gts_tf_dart
